#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var optimist = require('optimist');

var argv = optimist
  .usage('Usage: covershot [options] [file]')
  .options('f', {
    alias: 'format',
    default: 'html',
    describe: 'Desired output format. [html, json, plain]'
  })
  .options('m', {
    alias: 'map',
    demand: true,
    describe: 'Input data format mapper to use. [vows]'
  })
  .options('w', {
    alias: 'write',
    default: path.join(process.cwd(), 'coverage'),
    describe: 'Directory to write output to.'
  })
  .options('v', {
    alias: 'verbose',
    default: 'false'
  })
  .alias('help', 'h')
  .alias('h', '?')
  .check(function(argv) {
    if (argv.f !== 'html' && argv.f !== 'json' && argv.f !== 'plain') {
      throw new Error('Invalid --format');
    }
  })
  .argv;

if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}

var file = argv._.shift();
var input = file !== undefined ? fs.createReadStream(file) : process.stdin;
var buffer = [];

input.on('data', buffer.push.bind(buffer));
input.on('error', function(err) {
  console.error(err);
  process.exit(1);
});
input.on('end', function() {
  var mapper = require('../lib/map/' + argv.map);
  var mappedOutput = mapper.map(buffer);
  var formatter = require('../lib/format/' + argv.f);
  formatter.report(mappedOutput, argv.write);
});
input.resume();
